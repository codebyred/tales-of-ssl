use openssl::{
    bn::BigNum,
    hash::MessageDigest,
    nid::Nid,
    pkey::PKey,
    rsa::Rsa,
    x509::{X509NameBuilder, X509},
};
use base64::decode;
use std::fs::write;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Base64 decode the private key
    let private_key_base64 = "MIICXAIBAAKBgQCypWy2qvwq14fGYrZMhWW/Wd1NVk2GbvhPQc1d5V8E0XyrJUjKb/FKYFR8Q2Jg/QcXTyHrkWv5l0mshF8ISWYBITsukHAK2O/Ln36xAAZmcadIAL2qT2AOtYgSsQZqHTDMW1ZhWIhpJt1XiFG/sPvoOj2Sz1DVi+fP68NleTlAqwIDAQABAoGBAIOvRxy7m1glOfN1zjVH28Gah3O7mzfuUuFxeuWs70bI+OHbgPWgYLfXnE9hCIK/4VtAPJu9vV7lMyyVAsxD9ojBXzwWbtHaM1qvCBj/+4Gm3KZaz0ZFPv6RV+dzvLo4hSrdJTnDZQInZKRItxdOThnUyI+ROQNeq8VW+/iiDGzpAkEA2CNbk15+HHUaTBEBUcOZ7pB9BQ00oiewSDrfJB6wxNapO9kQ231T940B9YOzypw9kd6n929qRdmLPGW9KdlmrQJBANOX8ON1Of/aOkWGQ4y5i7S5qHC+56j8Ff7U34G2Vz6iB5jiMNqnvEGpKVgindqtGR2ArUR6y+gW16ZKvGjup7cCQDDgLgExSQteX8f7wHSg6tpLyjmuNszEdNSgm30rg4W/lR13hJxdxvMf6+V9FtcmZbXqx8joZPvOqfHKf/BKvTECQFkJ5QoyODfb4w2ClEZRheKFBcZ77wwDGFZlya/RxSDMGhpRhHFeiC+xOX6nAnoUwS7TCRZ5/fgqNJD7fhFB7D0CQBEu/SBTXlL+vAdpUvbktZBuSW7c31T5kD3pxzepo4HqFG+1bHlV8Rea1B0K6y3S+4DGgimlBirddSv6Xh8GlrQ=";
    let private_key_der = decode(private_key_base64)?;
    let rsa = Rsa::private_key_from_der(&private_key_der)?;
    let pkey = PKey::from_rsa(rsa)?;

    // Build subject name
    let mut name_builder = X509NameBuilder::new()?;
    name_builder.append_entry_by_nid(Nid::COMMONNAME, "little-water-5153.gov")?;
    name_builder.append_entry_by_nid(Nid::COUNTRYNAME, "Keeling Islands")?;
    let name = name_builder.build();

    // Create certificate
    let mut builder = X509::builder()?;
    builder.set_version(2)?; // v3
    builder.set_subject_name(&name)?;
    builder.set_issuer_name(&name)?; // self-signed
    builder.set_pubkey(&pkey)?;

    // Set serial number
    let serial = BigNum::from_hex_str("5ca1ab1e")?.to_asn1_integer()?;
    builder.set_serial_number(&serial)?;

    // Set validity period (now to +365 days)
    let not_before = openssl::asn1::Asn1Time::days_from_now(0)?;
    let not_after = openssl::asn1::Asn1Time::days_from_now(365)?;
    builder.set_not_before(&not_before)?;
    builder.set_not_after(&not_after)?;

    // Sign with private key
    builder.sign(&pkey, MessageDigest::sha256())?;

    let certificate = builder.build();

    // Write to files
    write("certificate.pem", certificate.to_pem()?)?;
    write("private_key.pem", pkey.private_key_to_pem_pkcs8()?)?;

    println!("Certificate and key written to files.");
    Ok(())
}
